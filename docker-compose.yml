services:
  app:
    image: app
    build:
      context: ./
      target: dev
    working_dir: /usr/src/app/
    env_file:
      - .env
    environment:
      DATABASE_URL: postgres://${DB_USER}:${DB_PASS}@pg_bouncer:5432/${DB_NAME}
      DIRECT_DATABASE_URL: postgres://${DB_USER}:${DB_PASS}@database:5432/${DB_NAME}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASS: ${REDIS_PASS}
    ports:
      - 3000:3000
    volumes:
      - ./:/usr/src/app/
      - /usr/src/app/node_modules/
    command: bun run dev
    depends_on:
      pg_bouncer:
        condition: service_healthy
      redis:
        condition: service_healthy

  database:
    image: postgres:16.4
    ports:
      - 5433:5432
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      ALLOW_IP_RANGE: "172.0.0.0/8"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 3s
      timeout: 3s
      retries: 5
    command: ["postgres", "-c", "log_statement=none"]
    volumes:
      - pgdata:/var/lib/postgresql/data/

  pg_bouncer:
    image: edoburu/pgbouncer:v1.24.1-p1
    environment:
      MAX_CLIENT_CONN: 100
      POOL_MODE: transaction
      AUTH_TYPE: scram-sha-256
      DB_NAME: ${DB_NAME}
      DB_HOST: database
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASS}
    ports:
      - 5434:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost"]
      interval: 3s
      timeout: 3s
      retries: 5
    depends_on:
      database:
        condition: service_healthy

  redis:
    image: redis:8.2.2
    ports:
      - 6379:6379
    volumes:
      - redisdata:/data
    command: >
      --requirepass ${REDIS_PASS}
    healthcheck:
      test:
        [
          "CMD",
          "redis-cli",
          "-u",
          "redis://:${REDIS_PASS}@localhost:6379",
          "ping",
        ]
      interval: 3s
      timeout: 3s
      retries: 5

volumes:
  pgdata:
  redisdata:
